// Mocks generated by Mockito 5.2.0 from annotations
// in notr/test/views/widgets/app_setup/app_setup_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:notr/managers/application_error_manager.dart' as _i2;
import 'package:notr/managers/configuration_manager.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeApplicationErrorManager_0 extends _i1.Fake
    implements _i2.ApplicationErrorManager {}

/// A class which mocks [ConfigurationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigurationManager extends _i1.Mock
    implements _i3.ConfigurationManager {
  MockConfigurationManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApplicationErrorManager get errorManager =>
      (super.noSuchMethod(Invocation.getter(#errorManager),
              returnValue: _FakeApplicationErrorManager_0())
          as _i2.ApplicationErrorManager);
  @override
  void startApp(_i4.Widget? widget) =>
      super.noSuchMethod(Invocation.method(#startApp, [widget]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> initialize(
          {bool? enabledDataCollection = true,
          bool? useLocalEmulators = false}) =>
      (super.noSuchMethod(
          Invocation.method(#initialize, [], {
            #enabledDataCollection: enabledDataCollection,
            #useLocalEmulators: useLocalEmulators
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
